# coding: utf-8
__author__ = 'haint83'
import logging
from werkzeug import parse_options_header, cached_property
from flask import json
import urllib2 as http
import sys
PY3 = sys.version_info[0] == 3
if PY3:
    unicode_type = str
    bytes_type = bytes
else:
    unicode_type = unicode
    bytes_type = str
log = logging.getLogger('flask_oauth2')

__all__ = ('PermissionRemoteApp',)


def to_bytes(text, encoding='utf-8'):
    """Make sure text is bytes type."""
    if not text:
        return text
    if not isinstance(text, bytes_type):
        text = text.encode(encoding)
    return text


class PermissionRemoteApp(object):
    def __init__(
        self,
        permission_url=None,
        encoding='utf-8',
    ):
        self._permission_url = permission_url
        self.encoding = encoding

    @cached_property
    def permission_url(self):
        return self._get_property('permission_url')

    def _get_property(self, key):
        attr = getattr(self, '_%s' % key)
        return attr

    @staticmethod
    def http_request(uri, headers=None, data=None, method='POST'):
        log.debug('Request %r with %r method' % (uri, method))
        req = http.Request(uri, headers=headers, data=data)
        req.get_method = lambda: method.upper()
        try:
            resp = http.urlopen(req)
            content = resp.read()
            resp.close()
            return resp, content
        except http.HTTPError as resp:
            content = resp.read()
            resp.close()
            return resp, content

    def check_permission_request(self, actor, role=None, collection=None, resource=None):
        data = {
            'actor': actor,
            'role': role,
            'collection': collection,
            'resource': resource
        }
        data = json.dumps(data)
        resp, content = self.http_request(
            uri=self.permission_url,
            headers={
                'Content-Type': 'application/json'
            },
            data=to_bytes(data, self.encoding)
        )
        code = resp.code
        content = json.loads(content)
        return code, content
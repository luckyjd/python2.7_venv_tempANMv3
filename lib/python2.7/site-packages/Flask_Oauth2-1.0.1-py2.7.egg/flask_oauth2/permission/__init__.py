# -*- coding: utf-8 -*-
from flask import current_app, request, abort
from permission import PermissionRemoteApp
from functools import wraps


class Permissions(object):
    """
    Optional Configs:

    |Key                      | Default                                           |
    |-------------------------|---------------------------------------------------|
    |IDM_HOST                 | 127.0.0.1                                         |
    |IDM_PORT                 | 8881                                              |

    """
    def __init__(self, app=None):
        self._app = app
        if app:
            self.init_app(app)

    def init_app(self, app):
        app.config.setdefault('IDM_HOST', '127.0.0.1')
        app.config.setdefault('IDM_PORT', 8881)

    @property
    def app(self):
        return self._app or current_app

    def verify_role(self, username, role):
        url = 'http://{0}:{1}/api/v2/me/check'.format(self.app.config['IDM_HOST'], self.app.config['IDM_PORT'])
        remote = PermissionRemoteApp(permission_url=url)
        # Check role
        code, content = remote.check_permission_request(actor=username, role=role)
        if code not in (200, 201):
            current_app.logger.debug(content)
            return False
        return True

    def require_perm(self, *roles):
        """Check role permission."""
        def wrapper(f):
            @wraps(f)
            def decorated(*args, **kwargs):
                url = 'http://{0}:{1}/api/v2/me/check'.format(self.app.config['IDM_HOST'], self.app.config['IDM_PORT'])
                remote = PermissionRemoteApp(permission_url=url)
                actor = request.args.get('actor', default=None)
                role = []
                for r in roles:
                    role.append(r)
                # Check role
                code, content = remote.check_permission_request(actor=actor, role=role)
                if code not in (200, 201):
                    current_app.logger.debug(content)
                    if 'error' in content:
                        return abort(code, content['error'])
                elif 'actor' in content:
                    request.actor = content['actor']['username']
                    request.roles = content['actor']['roles']
                return f(*args, **kwargs)
            return decorated
        return wrapper

    def verify_resource(self, collection, resource):
        """Check resource permission."""
        url = 'http://{0}:{1}/api/v2/me/check'.format(self.app.config['IDM_HOST'], self.app.config['IDM_PORT'])
        remote = PermissionRemoteApp(permission_url=url)
        actor = request.args.get('actor', default=None)
        # Check resource
        code, content = remote.check_permission_request(actor=actor, collection=collection, resource=resource)
        if code not in (200, 201):
            current_app.logger.debug(content)
            if 'error' in content:
                return abort(code, content['error'])
        return True
# -*- coding: utf-8 -*-
from flask import current_app, request, abort
from resources import ResourceRemoteApp
from functools import wraps


class ResourceProvider(object):
    """
    Optional Configs:

    |Key                      | Default                                           |
    |-------------------------|---------------------------------------------------|
    |OAUTH2_SERVER            |127.0.0.1                                          |
    |OAUTH2_PORT              |8881                                               |
    |OAUTH2_ENABLED           |True                                               |
    """
    def __init__(self, app=None):
        self._app = app
        if app:
            self.init_app(app)

    def init_app(self, app):
        app.config.setdefault('OAUTH2_SERVER', '127.0.0.1')
        app.config.setdefault('OAUTH2_PORT', 8881)
        app.config.setdefault('OAUTH2_ENABLED', True)

    @property
    def app(self):
        return self._app or current_app

    def require_oauth(self, *scopes):
        """Protect resource with specified scopes."""
        def wrapper(f):
            @wraps(f)
            def decorated(*args, **kwargs):
                if current_app.config['OAUTH2_ENABLED'] is False:
                    return f(*args, **kwargs)
                url = 'http://{0}:{1}/api/v2/oauth2/validate'.format(current_app.config['OAUTH2_SERVER'],
                                                                     current_app.config['OAUTH2_PORT'])
                remote = ResourceRemoteApp(validate_token_url=url)
                bearer_token = request.headers.get('Authorization', None)
                scope = []
                for s in scopes:
                    scope.append(s)
                code, content = remote.validate_token_request(token=bearer_token, scope=scope)
                if code not in (200, 201):
                    current_app.logger.debug(content)
                    if 'error' in content:
                        return abort(code, content['error'])
                return f(*args, **kwargs)
            return decorated
        return wrapper
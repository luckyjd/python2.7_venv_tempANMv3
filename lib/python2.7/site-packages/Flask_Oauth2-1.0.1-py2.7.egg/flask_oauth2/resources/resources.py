# -*- coding: utf-8 -*-
import logging
from oauthlib.oauth2.rfc6749.parameters import prepare_token_request as prepare_request
from oauthlib.common import bytes_type
from werkzeug import parse_options_header, cached_property
from flask import json
import urllib2 as http
log = logging.getLogger('flask_oauth2')

__all__ = ('ResourceRemoteApp',)


def to_bytes(text, encoding='utf-8'):
    """Make sure text is bytes type."""
    if not text:
        return text
    if not isinstance(text, bytes_type):
        text = text.encode(encoding)
    return text


class ResourceRemoteApp(object):
    def __init__(
        self,
        validate_token_url=None,
        encoding='utf-8',
    ):
        self._validate_token_url = validate_token_url
        self.encoding = encoding

    @cached_property
    def validate_token_url(self):
        return self._get_property('validate_token_url')

    def _get_property(self, key):
        attr = getattr(self, '_%s' % key)
        return attr

    @staticmethod
    def http_request(uri, headers=None, data=None, method='POST'):
        log.debug('Request %r with %r method' % (uri, method))
        req = http.Request(uri, headers=headers, data=data)
        req.get_method = lambda: method.upper()
        try:
            resp = http.urlopen(req)
            content = resp.read()
            resp.close()
            return resp, content
        except http.HTTPError as resp:
            content = resp.read()
            resp.close()
            return resp, content

    def validate_token_request(self, token, scope):
        body = prepare_request('client_credentials', scope=scope)
        resp, content = self.http_request(
            uri=self.validate_token_url,
            headers={
                'Authorization': token,
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            data=to_bytes(body, self.encoding)
        )
        code = resp.code
        content = json.loads(content)
        return code, content
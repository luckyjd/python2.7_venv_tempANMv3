# -*- coding: utf-8 -*-
from clients import OAuthRemoteApp
from flask import current_app, abort
import pytz
from datetime import datetime, timedelta


class Oauth2Client(object):
    """
    Required Configs:

    |Key                      |
    |-------------------------|
    |OAUTH2_CONSUMER_KEY      |
    |OAUTH2_CONSUMER_SECRET   |

    Optional Configs:

    |Key                      | Default                                           |
    |-------------------------|---------------------------------------------------|
    |OAUTH2_SERVER            |127.0.0.1                                          |
    |OAUTH2_PORT              |8881                                               |
    |OAUTH2_ENABLED           |True                                               |

    """
    def __init__(self, app=None):
        self._app = app
        if app:
            self.init_app(app)

    def init_app(self, app):
        app.config.setdefault('OAUTH2_SERVER', '127.0.0.1')
        app.config.setdefault('OAUTH2_PORT', 8881)
        app.config.setdefault('OAUTH2_ENABLED', True)
        app.config.update({'ACCESS_TOKEN': None})
        app.config.update({'EXPIRES': None})

    @property
    def app(self):
        return self._app or current_app

    @property
    def header(self):
        return self.headers

    @property
    def headers(self):
        if current_app.config['OAUTH2_ENABLED'] is False:
            headers = {'content-type': 'application/json'}
            return headers
        utc = pytz.UTC
        if current_app.config['ACCESS_TOKEN'] and current_app.config['EXPIRES']:
            now = utc.localize(datetime.now())
            if now < current_app.config['EXPIRES']:
                headers = {
                    'content-type': 'application/json',
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Authorization': 'Bearer %s' % current_app.config['ACCESS_TOKEN']
                }
                return headers
        url = 'http://{0}:{1}/api/v2/oauth2/token'.format(current_app.config['OAUTH2_SERVER'],
                                                          current_app.config['OAUTH2_PORT'])
        remote = OAuthRemoteApp(
            access_token_url=url,
            consumer_key=self.app.config['OAUTH2_CONSUMER_KEY'],
            consumer_secret=self.app.config['OAUTH2_CONSUMER_SECRET'],
        )
        code, content = remote.access_token_request()
        if code not in (200, 201):
            current_app.logger.debug(content)
            if 'error' in content:
                return abort(code, content['error'])
        current_app.config['ACCESS_TOKEN'] = content['access_token']
        expires_in = content['expires_in']
        current_app.config['EXPIRES'] = utc.localize(datetime.now() + timedelta(seconds=expires_in))
        headers = {
            'content-type': 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': 'Bearer %s' % current_app.config['ACCESS_TOKEN']
        }
        return headers

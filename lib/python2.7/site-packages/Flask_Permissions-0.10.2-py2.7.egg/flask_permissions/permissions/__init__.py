# -*- coding: utf-8 -*-
from flask import request, abort
from permissions import PermissionsRemote
from ..utils import create_url
from functools import wraps


class Permissions(object):
    """
    Required Configs:
    |Key                      | Example                                           |
    |-------------------------|---------------------------------------------------|
    |IAM_HOST                 | 127.0.0.1                                         |
    |IAM_PORT                 | 8881                                              |

    """
    def __init__(self, app=None):
        self._app = app
        if app:
            self.init_app(app)

    def init_app(self, app):
        self._app = app

    def check_perm(self, user, _prefix, permission_id):
        """Kiểm tra quyền của user để hiển thị các thành phần giao diện."""

        permission_url = create_url(
            base='http://%s:%s' % (self._app.config['IAM_HOST'], self._app.config['IAM_PORT']),
            path='/api/v2/me/permissions')
        perms = PermissionsRemote(permission_url=permission_url)
        # Check permission
        code, content = perms.check_permission(user, _prefix, permission_id)
        if code not in (200, 201):
            self._app.logger.warn(content)
            return abort(code, content['error'])
        return content['result']

    def require_perm(self, _prefix, permission_id):
        """Kiểm tra quyền của user trên các API."""

        def wrapper(f):
            @wraps(f)
            def decorated(*args, **kwargs):
                permission_url = create_url(
                    base='http://%s:%s' % (self._app.config['IAM_HOST'], self._app.config['IAM_PORT']),
                    path='/api/v2/me/permissions')
                perms = PermissionsRemote(permission_url=permission_url)
                actor = request.args.get('actor', default=None)
                # Check permission
                code, content = perms.check_permission(actor, _prefix, permission_id)
                if code not in (200, 201):
                    self._app.logger.warn(content)
                    return abort(code, content['error'])
                if content['result'] is False:
                    return abort(401, {'code': 2000, 'message': 'You do not have permission to access'})
                return f(*args, **kwargs)
            return decorated
        return wrapper

    def is_admin(self, user, resource_type, tenant_id):
        """Kiểm tra user có quyền admin trên tenant."""

        permission_url = create_url(
            base='http://%s:%s' % (self._app.config['IAM_HOST'], self._app.config['IAM_PORT']),
            path='/api/v2/me/roles')
        perms = PermissionsRemote(permission_url=permission_url)
        # Check role
        code, content = perms.check_role(user, resource_type, tenant_id, 'admin')
        if code not in (200, 201):
            self._app.logger.warn(content)
            return abort(code, content['error'])
        return content['result']

    def is_admin_or_member(self, user, resource_type, tenant_id):
        """Kiểm tra user có quyền admin hoặc member trên tenant."""

        permission_url = create_url(
            base='http://%s:%s' % (self._app.config['IAM_HOST'], self._app.config['IAM_PORT']),
            path='/api/v2/me/roles')
        perms = PermissionsRemote(permission_url=permission_url)
        # Check role
        code, content = perms.check_role(user, resource_type, tenant_id)
        if code not in (200, 201):
            self._app.logger.warn(content)
            return abort(code, content['error'])
        return content['result']
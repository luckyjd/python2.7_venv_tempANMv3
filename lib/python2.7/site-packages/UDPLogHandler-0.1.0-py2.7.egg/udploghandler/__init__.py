import json
import logging
import socket

__version__ = "0.1.0"
__author__ = "thonglh <thonglh@viettel.com.vn>"
__homepage__ = ''
__license__ = 'BSD'

class UDPLogHandler(logging.Handler):
    """
    Handler that send log record object to UDP server
    """

    def __init__(self, host="127.0.0.1", port=514, encoding='utf-8'):
        logging.Handler.__init__(self)
        self.host = host
        self.port = port
        self.encoding = encoding
        self.format = self._json_format
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    def _json_format(self, record):
        return json.dumps(dict(app_name=record.name, level=record.levelname,
                               file=record.pathname, line=record.lineno,
                               message=record.msg, trace=record.exc_text,
                               timestamp=int(record.created * 1000),
			       source_log='webapp'),
                          encoding=self.encoding)

    def setFormatter(self, fmt):
        if fmt and hasattr(fmt, '__call__'):
            self.format = fmt
        elif isinstance(fmt, logging.Formatter):
            self.formatter = fmt
            self.format = lambda r: self.formatter.format(r)
        else:
            raise Exception("Formatter must be a logging.Formatter or a function")

    def emit(self, record):
        try:
            msg = self.format(record)
            if isinstance(msg, unicode):
                msg = msg.encode(self.encoding)

            self.sock.sendto(msg, (self.host, self.port))
            self.flush()
        except:
            self.handleError(record)


# -*- coding: utf-8 -*-
from functools import wraps
from flask import abort, request
from password import PasswordSafe
from identity import IdentitySafe


class Safe(object):
    """
    Optional Configs:

    |Key                      | Default                                           |
    |-------------------------|---------------------------------------------------|
    |PASSWORD_BLACK_LIST      | None                                              |
    |PASSWORD_MINIMUM_LENGTH  | 8                                                 |
    |IDENTITY_MINIMUM_LENGTH  | 3                                                 |
    |IDENTITY_MAXIMUM_LENGTH  | 30                                                |
    |USERNAME_MINIMUM_LENGTH  | 5                                                 |
    |USERNAME_MAXIMUM_LENGTH  | 30                                                |

    """

    def __init__(self, app=None):
        self._app = app
        if app:
            self.init_app(app)

    def init_app(self, app):
        self._app = app
        app.config.setdefault('PASSWORD_BLACK_LIST', None)
        app.config.setdefault('PASSWORD_MINIMUM_LENGTH', 8)
        app.config.setdefault('IDENTITY_MINIMUM_LENGTH', 3)
        app.config.setdefault('IDENTITY_MAXIMUM_LENGTH', 30)
        app.config.setdefault('USERNAME_MINIMUM_LENGTH', 5)
        app.config.setdefault('USERNAME_MAXIMUM_LENGTH', 30)

    def identity(self, field):
        def wrapper(f):
            @wraps(f)
            def decorated(*args, **kwargs):
                id_safe = IdentitySafe(
                    minimum_length=self._app.config['IDENTITY_MINIMUM_LENGTH'],
                    maximum_length=self._app.config['IDENTITY_MAXIMUM_LENGTH']
                )
                data = request.get_json()
                if data and field in data:
                    result = id_safe.check(raw=data[field])
                    if bool(result) is False:
                        return abort(400, {'code': 400, 'message': str(result)})
                return f(*args, **kwargs)
            return decorated
        return wrapper

    def username(self, field):
        def wrapper(f):
            @wraps(f)
            def decorated(*args, **kwargs):
                username_safe = IdentitySafe(
                    minimum_length=self._app.config['USERNAME_MINIMUM_LENGTH'],
                    maximum_length=self._app.config['USERNAME_MAXIMUM_LENGTH']
                )
                data = request.get_json()
                if data and field in data:
                    result = username_safe.check(raw=data[field])
                    if bool(result) is False:
                        return abort(400, {'code': 400, 'message': str(result)})
                return f(*args, **kwargs)
            return decorated
        return wrapper

    def password(self, field):
        def wrapper(f):
            @wraps(f)
            def decorated(*args, **kwargs):
                pw_safe = PasswordSafe(
                    black_list_file=self._app.config['PASSWORD_BLACK_LIST'],
                    minimum_length=self._app.config['PASSWORD_MINIMUM_LENGTH']
                )
                data = request.get_json()
                if data and field in data:
                    result = pw_safe.check(raw=data[field])
                    if bool(result) is False:
                        return abort(400, {'code': 400, 'message': str(result)})
                return f(*args, **kwargs)
            return decorated
        return wrapper
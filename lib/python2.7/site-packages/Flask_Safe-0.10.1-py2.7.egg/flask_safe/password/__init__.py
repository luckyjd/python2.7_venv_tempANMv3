# -*- coding: utf-8 -*-
import re
import os.path
from ..utils import to_unicode

__all__ = ['Strength', 'PasswordSafe']

ASDF = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']


class Strength(object):
    """Measure the strength of a password.

    Here are some common usages of strength::

        >>> strength = Strength(True, 'Password is perfect')
        >>> bool(strength)
        True
        >>> str(strength)
        'Password is perfect'

    :param valid: if the password is valid to use
    :param message: a message related to the password
    """
    def __init__(self, valid, message):
        self.valid = valid
        self.message = message

    def __str__(self):
        return self.message

    def __unicode__(self):
        return self.message

    def __nonzero__(self):
        return self.valid

    def __bool__(self):
        return self.valid


class PasswordSafe(object):
    minimum_length = 8

    def __init__(self, black_list_file=None, minimum_length=None):
        file_path = os.path.join(os.path.dirname(__file__), 'words.txt')
        if black_list_file:
            file_path = black_list_file
        self.black_list = self._load_words(file_path)
        if minimum_length:
            self.minimum_length = minimum_length
        self.pattern = (
            # Don't allow any spaces, e.g. '\t', '\n' or whitespace etc.
            r'^(?!.*[\s])'
            # Check for a digit
            '((?=.*[\d])'
            # Check for an uppercase letter
            '(?=.*[A-Z])'
            # Check for an lowercase letter
            '(?=.*[a-z])'
            # check for special characters. Something which is not word, digit or
            # space will be treated as special character
            '(?=.*[^\w\d\s])).'
            # Minimum $minimum_length characters
            '{' + str(self.minimum_length) + ',}$')

    @staticmethod
    def _load_words(black_list_file):
        """ Load back list password from black list file. """

        file_path = black_list_file
        words = []
        with open(file_path, 'rb') as f:
            for line in f.readlines():
                word = line
                if line and '\n' in line:
                    word, space = line.split('\n')
                if word:
                    words.append(to_unicode(word).lower())
        return words

    def is_common_password(self, raw):
        """ If the password is common used. """

        if to_unicode(raw).lower() in self.black_list:
            return True
        return False

    @staticmethod
    def is_asdf(raw):
        """ If the password is in the order on keyboard. """

        reverse = raw[::-1]

        asdf = ''.join(ASDF)
        return raw in asdf or reverse in asdf

    @staticmethod
    def is_by_step(raw):
        """ If the password is alphabet step by step. """

        # make sure it is unicode
        delta = ord(raw[1]) - ord(raw[0])

        for i in range(2, len(raw)):
            if ord(raw[i]) - ord(raw[i-1]) != delta:
                return False
        return True

    def check(self, raw):
        """ Check the safety level of the password.
        :param raw: raw text password.
        """

        if self.is_asdf(raw) or self.is_by_step(raw):
            return Strength(False, 'Password has a pattern')

        if self.is_common_password(raw):
            return Strength(False, 'Password is too common')

        if not re.match(self.pattern, raw):
            return Strength(False, 'Password is weak')
        return Strength(True, 'Password is perfect')